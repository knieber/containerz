{
  "name": "rijs.core",
  "version": "0.0.17",
  "main": "dist",
  "author": {
    "name": "Pedram Emrouznejad",
    "url": "https://github.com/pemrouz"
  },
  "description": "Ripple Core",
  "repository": {
    "type": "git",
    "url": "git://github.com/rijs/core.git"
  },
  "scripts": {
    "ignore": "find ./dist -type f -exec sed -i \"s/function _interopRequire/\\/* istanbul ignore next *\\/\\nfunction _interopRequire/g\" {} ;",
    "babel": "babel src -d dist",
    "clean": "rm -rf dist && mkdir dist",
    "build": "npm run clean && npm run babel && npm run ignore",
    "test": "istanbul test ./node_modules/mocha/bin/_mocha --report html -- -R spec",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && rm -rf ./coverage",
    "cov": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec",
    "version": "npm run build && git add -A",
    "postversion": "git push && git push --tags"
  },
  "browser": {
    "colors": false
  },
  "license": "pemrouz.mit-license.org",
  "devDependencies": {
    "babel-cli": "*",
    "babel-preset-es2015": "*",
    "browserify": "*",
    "chai": "*",
    "coveralls": "*",
    "istanbul": "*",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "uglify-js": "*"
  },
  "dependencies": {
    "colors": "^1.1.0",
    "utilise": "*"
  },
  "readme": "# Ripple | Core\r\n[![Coverage Status](https://coveralls.io/repos/rijs/core/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/core?branch=master)\r\n[![Build Status](https://travis-ci.org/rijs/core.svg)](https://travis-ci.org/rijs/core)\r\n\r\n\r\nA simple extensible in-memory data structure of resources. \r\n\r\n```js\r\nvar ripple = core()\r\n\r\nripple(name, body) // setter\r\nripple(name)       // getter\r\n```\r\n\r\nYou can also use the method-chained API:\r\n\r\n```js\r\nripple                \r\n  .resource(name, body)\r\n  .resource(name, body)\r\n  ...\r\n```\r\n\r\nThe resources it registers are accesible under `ripple.resources`.\r\n\r\nA **canonical** resource is an object with the following shape and three properties:\r\n\r\n```js\r\n{ name: 'foo'\r\n, body: 'bar'\r\n, headers: { 'content-type': 'text/plain' }\r\n}\r\n```\r\n\r\nThat is, it can be uniquely identified (`name`), the resource itself (`body`) and some arbitrary metadata (`headers`). Core only deals with the `content-type` header, however other modules may add and interpret their own per-resource metadata.\r\n\r\nCore only comes with one _type_ (`text/plain`) out of the box, so will fail to register anything other than a string. This is to make it very extensible and future-proof, such that you could for example create other exotic types like `application/jsx`, `text/jade` or `data/immutable`.\r\n\r\nNote that you do not have to register a canonical resource, you will most likely use shortcuts in your application code (see [API](https://github.com/rijs/core#api) for more).\r\n\r\n```js\r\nripple('foo', 'bar')\r\n\r\n// will result in ripple.resources ===\r\n{\r\n  foo: { name: 'foo'\r\n       , body: 'bar'\r\n       , headers: { 'content-type': 'text/plain' }\r\n       }\r\n}\r\n```\r\n\r\n## Resource Interpretation\r\n\r\nWhen an content-type header is not explicitly given, core will loop through it's registered types and see if any of them understand this particular resource (by passing `{ name, body, headers }` to each type `check` function). If any of them do:\r\n\r\n* The `content-type` header will be set\r\n* The type `parse` function will be run on the resource\r\n* The resource will be stored internally\r\n* A [change event](https://github.com/rijs/core#--event) will be emitted\r\n\r\nYou'll need to extend `ripple.types` to tell it how to interpret other resources. Each type object should have the following:\r\n\r\n```js\r\n{ header: 'the content type you are registering'\r\n, check: function // necessary\r\n, parse: function // optional\r\n}\r\n```\r\n\r\nThe `parse` function is a chance to initialise the resource, set default headers, etc. Some examples: \r\n* `application/data` - [proxies change events](https://github.com/rijs/data/blob/master/src/index.js#L10-L21) so you can do per-resource change listeners `ripple('data').on('change, fn)`\r\n* `application/javascript` - turns a [function as a string into a real function](https://github.com/rijs/fn/blob/master/src/index.js#L9) (useful since streamed over WS).\r\n\r\nOther modules can also extend existing parse functions. For example, `sync` [extends every type parse function](https://github.com/rijs/sync/blob/master/src/index.js#L99-L113) to add the ability to define server/client transformation functions. \r\n\r\nSee other existing vanilla types for more examples: [Data](https://github.com/rijs/data), [Versioned Data](https://github.com/rijs/versioned), [Functions](https://github.com/rijs/fn), [HTML](https://github.com/rijs/html), [CSS](https://github.com/rijs/css).\r\n\r\n## Event\r\n\r\nThe core instance is [emitterified](https://github.com/utilise/utilise#--emitterify). Whenever a resource is registered, a change event will be emitted.\r\n\r\n```js\r\nripple.on('change', doSomething)\r\n```\r\n\r\n## API\r\n\r\n```js\r\nripple('name')                   // - returns the resource body if it exists\r\nripple('name', body)             // - creates & returns resource, with specified name and body\r\nripple('name', body, headers })  // - creates & returns resource, with specified name, body and headers\r\nripple({ name, body, headers })  // - creates & returns resource, with specified name, body and headers\r\nripple([ ... ])                  // - calls ripple on each item - registers an array of resources\r\nripple.resources                 // - returns raw resources\r\nripple.resource                  // - alias for ripple, returns ripple instead of resource for method chaining\r\nripple.register                  // - alias for ripple\r\nripple.on                        // - event listener for changes - all resources\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rijs/core/issues"
  },
  "homepage": "https://github.com/rijs/core#readme",
  "_id": "rijs.core@0.0.17",
  "_shasum": "578ca859a1e2045e47583b4bb5209d0f0d65f0df",
  "_resolved": "https://registry.npmjs.org/rijs.core/-/rijs.core-0.0.17.tgz",
  "_from": "https://registry.npmjs.org/rijs.core/-/rijs.core-0.0.17.tgz"
}
