{
  "name": "rijs.db",
  "version": "0.1.7",
  "main": "dist",
  "browser": "./node_modules/utilise/identity.js",
  "author": {
    "name": "Pedram Emrouznejad",
    "url": "https://github.com/pemrouz"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rijs/db.git"
  },
  "scripts": {
    "ignore:1": "find ./dist -type f -exec sed -i \"s/function _interopRequire/\\/* istanbul ignore next *\\/\\nfunction _interopRequire/g\" {} ;",
    "ignore:2": "find ./dist -type f -exec sed -i \"s/var _ref = arguments.length/\\/* istanbul ignore next *\\/\\nvar _ref = arguments.length/g\" {} ;",
    "babel": "babel src -d dist",
    "clean": "rm -rf dist && mkdir dist",
    "build": "npm run clean && npm run babel && npm run ignore:1 && npm run ignore:2",
    "test": "istanbul test ./node_modules/mocha/bin/_mocha --report html -- -R spec",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && rm -rf ./coverage",
    "cov": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec",
    "version": "npm run build && git add -A",
    "postversion": "git push && git push --tags"
  },
  "license": "pemrouz.mit-license.org",
  "devDependencies": {
    "babel-cli": "*",
    "babel-preset-es2015": "*",
    "browserify": "*",
    "chai": "*",
    "popper": "*",
    "coveralls": "*",
    "istanbul": "*",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "uglify-js": "*",
    "rijs.core": "*",
    "rijs.data": "*"
  },
  "dependencies": {
    "utilise": "*"
  },
  "readme": "# Ripple | Database\r\n[![Coverage Status](https://coveralls.io/repos/rijs/db/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/db?branch=master)\r\n[![Build Status](https://travis-ci.org/rijs/db.svg)](https://travis-ci.org/rijs/db)\r\n\r\nAllows connecting a node to external services. For example, when a resource changes, it could update a database, synchronise with other instances over AMQP, or pump to Redis. \r\n\r\n```js\r\nripple = require('rijs')({ db: 'type://user:password@host:port/database' })\r\n```\r\n\r\nIt destructures the connection string into an object, looks up the `type` in `ripple.adaptors`, then passes that function the connection string as an object, and stores the result under `ripple.connections`. \r\n\r\n```js\r\nripple.connections.push(\r\n  ripple.adaptors[type]({ type, user, database, port, host, password })\r\n)\r\n```\r\n\r\nYou must register any adaptors you wish to use separate to this module. An adaptor is a constructor function that takes the connection string as an object, creates an active connection and returns an object of functions for each possible change type: `{ add, update, remove }`. These hooks will be invoked when the corresponding event occurs.\r\n\r\n```js\r\nripple.on('change', ({ key, value, type }) => \r\n  ripple.connections.map(con => \r\n    con[type](res, key, value)))\r\n```",
  "readmeFilename": "README.md",
  "description": "[![Coverage Status](https://coveralls.io/repos/rijs/db/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/db?branch=master)\r [![Build Status](https://travis-ci.org/rijs/db.svg)](https://travis-ci.org/rijs/db)",
  "bugs": {
    "url": "https://github.com/rijs/db/issues"
  },
  "homepage": "https://github.com/rijs/db#readme",
  "_id": "rijs.db@0.1.7",
  "_shasum": "c3a56a8a29537f49cf8d66251c38fd1ad9483cf0",
  "_resolved": "https://registry.npmjs.org/rijs.db/-/rijs.db-0.1.7.tgz",
  "_from": "https://registry.npmjs.org/rijs.db/-/rijs.db-0.1.7.tgz"
}
