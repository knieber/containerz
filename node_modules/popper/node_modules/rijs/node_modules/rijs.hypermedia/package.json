{
  "name": "rijs.hypermedia",
  "version": "0.0.5",
  "main": "dist",
  "author": {
    "name": "Pedram Emrouznejad",
    "url": "https://github.com/pemrouz"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rijs/hypermedia.git"
  },
  "scripts": {
    "ignore": "find ./dist -type f -exec sed -i \"s/function _interopRequire/\\/* istanbul ignore next *\\/\\nfunction _interopRequire/g\" {} ;",
    "babel": "babel src -d dist",
    "clean": "rm -rf dist && mkdir dist",
    "build": "npm run clean && npm run babel && npm run ignore",
    "test": "istanbul test ./node_modules/mocha/bin/_mocha --report html -- -R spec",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && rm -rf ./coverage",
    "cov": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec",
    "version": "npm run build && git add -A",
    "postversion": "git push && git push --tags"
  },
  "license": "pemrouz.mit-license.org",
  "devDependencies": {
    "babel-cli": "*",
    "babel-preset-es2015": "*",
    "browserify": "*",
    "chai": "*",
    "popper": "*",
    "coveralls": "*",
    "istanbul": "*",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "uglify-js": "*",
    "rijs.components": "*",
    "rijs.core": "*",
    "rijs.css": "*",
    "rijs.data": "*",
    "rijs.fn": "*"
  },
  "dependencies": {
    "request": "^2.61.0",
    "utilise": "*"
  },
  "readme": "# Ripple | Hypermedia\r\n[![Coverage Status](https://coveralls.io/repos/rijs/hypermedia/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/hypermedia?branch=master)\r\n[![Build Status](https://travis-ci.org/rijs/hypermedia.svg)](https://travis-ci.org/rijs/hypermedia)\r\n\r\nExtends [core](https://github.com/rijs/core#ripple--core) to register a HATEOAS API as a resource, traverse links to other resources, and cache them.\r\n\r\nNormally, you can register some array/object/function/whatever against a key:\r\n\r\n```js\r\nripple('key', { value })\r\n```\r\n\r\nThis module lets you load a remote resource if the body is a URL:\r\n\r\n```js\r\nripple('github', 'https://api.github.com')\r\n// ripple('github') would then return the root object with all the links\r\n```\r\n\r\nand it lets you follow deep links (from the nearest resolved link):\r\n\r\n```js\r\nripple('github.current_user_url.id')\r\nripple('github.current_user_url.repos_url.0')\r\nripple('github.current_user_url.repos_url.0.owner.login')\r\n```\r\n\r\nIf it hits a property whose value is a URL (in the GitHub API, all those suffixed with `*_url`), it resolves and caches them as an intermediate resource. So accessing `ripple('github.current_user_url.id')`, would also populate the resource `ripple('github.current_user_url')`.\r\n\r\nYou can pass any extra headers you want (in this case, basic auth) to be used in the request by setting the `http` header (accessing subresource will automatically inherit headers). \r\n\r\n```js\r\nripple('github', 'https://api.github.com', { http })\r\n```\r\n\r\nYou can expand parameterised routes and also alias resources:\r\n\r\n```js\r\nripple('repo', { owner: 'pemrouz', repo: 'ripple' }, { link: 'github.repository_url' })\r\n```\r\n\r\nOr even traverse multiple parameterised links:\r\n\r\n```js\r\nripple('issue', { owner: 'pemrouz', repo: 'ripple', number: 1 }, { link: 'github.repository_url.issues_url' })\r\n```\r\n\r\n# TODO\r\n\r\n* [ ] Add profiles for dot notation to be able to traverse other hypermedia formats (HTML, HAL, Siren, Collection, etc) - see [Jon Moore's presentation](http://www.infoq.com/presentations/web-api-html) for HTML example.\r\n* [ ] Test use in declarative usage `<visualise-repos data=\"github.repos\">` \r\n* [ ] Alias subresources `ripple('repos', 'github.current_user_url.repos_url')`\r\n* [ ] Use same syntax to `POST` messages back: `ripple('github.current_user_url.repos_url', { body: new repo details })`",
  "readmeFilename": "README.md",
  "description": "[![Coverage Status](https://coveralls.io/repos/rijs/hypermedia/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/hypermedia?branch=master)\r [![Build Status](https://travis-ci.org/rijs/hypermedia.svg)](https://travis-ci.org/rijs/hypermedia)",
  "bugs": {
    "url": "https://github.com/rijs/hypermedia/issues"
  },
  "homepage": "https://github.com/rijs/hypermedia#readme",
  "_id": "rijs.hypermedia@0.0.5",
  "_shasum": "25c1f0f71c7a95b64f6ac47ed7cfc0bd29a9ad97",
  "_resolved": "https://registry.npmjs.org/rijs.hypermedia/-/rijs.hypermedia-0.0.5.tgz",
  "_from": "https://registry.npmjs.org/rijs.hypermedia/-/rijs.hypermedia-0.0.5.tgz"
}
